from flask import Flask, request, jsonify
import joblib
import numpy as np
import pandas as pd
import os
import io

app = Flask(__name__)

# üìå ƒê·ªãnh nghƒ©a c√°c c·ªôt ƒë·∫ßu v√†o c·∫ßn thi·∫øt
EXPECTED_COLUMNS = ['DayOn','Qoil','Qgas','Qwater','GOR','ChokeSize','Press_WH','Oilrate','LiqRate','GasRate']

# üìå T·∫£i t·∫•t c·∫£ m√¥ h√¨nh t·ª´ t·ªáp duy nh·∫•t
MODEL_FILE = "reverse_prediction_models.pkl"

if not os.path.exists(MODEL_FILE):
    raise FileNotFoundError(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ªáp '{MODEL_FILE}'!")

# Load models t·ª´ t·ªáp .pkl
try:
    models = joblib.load(MODEL_FILE)
    if not isinstance(models, dict):
        raise ValueError("‚ö†Ô∏è D·ªØ li·ªáu trong t·ªáp kh√¥ng ph·∫£i l√† dictionary ch·ª©a c√°c model!")
except Exception as e:
    raise RuntimeError(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {e}")

print(f"‚úÖ ƒê√£ t·∫£i {len(models)} m√¥ h√¨nh:", list(models.keys()))


# üìå H√†m ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
def preprocess_input(df):
    # Chuy·ªÉn c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá th√†nh NaN
    df.replace({"...": np.nan, "null": np.nan, "NaN": np.nan, "": np.nan}, inplace=True)

    # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÅu c√≥ trong DataFrame
    for col in EXPECTED_COLUMNS:
        if col not in df.columns:
            df[col] = np.nan

    # ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt ƒë√∫ng v·ªõi khi hu·∫•n luy·ªán
    df = df.reindex(columns=EXPECTED_COLUMNS)

    # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
    for col in EXPECTED_COLUMNS:
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # L∆∞u l·∫°i v·ªã tr√≠ c√°c gi√° tr·ªã b·ªã thi·∫øu
    missing_positions = {col: df[df[col].isnull()].index.tolist() for col in EXPECTED_COLUMNS}

    # D·ª± ƒëo√°n gi√° tr·ªã thi·∫øu cho t·ª´ng h√†ng
    for idx, row in df.iterrows():
        missing_cols = row[row.isnull()].index.tolist()
        if missing_cols:
            print(f"üîç D·ª± ƒëo√°n gi√° tr·ªã thi·∫øu cho d√≤ng {idx}...")

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o cho m√¥ h√¨nh
            input_data = row[EXPECTED_COLUMNS].values.reshape(1, -1)

            # D·ª± ƒëo√°n t·ª´ng c·ªôt thi·∫øu b·∫±ng m√¥ h√¨nh t∆∞∆°ng ·ª©ng
            for col in missing_cols:
                if col in models:
                    try:
                        predicted_value = models[col].predict(input_data)[0]
                        df.at[idx, col] = predicted_value
                        print(f"‚úÖ D·ª± ƒëo√°n {col} t·∫°i d√≤ng {idx}: {predicted_value}")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi d·ª± ƒëo√°n {col} t·∫°i d√≤ng {idx}: {e}")

    return df, missing_positions


# üìå API x·ª≠ l√Ω file CSV ƒë·∫ßu v√†o v√† d·ª± ƒëo√°n k·∫øt qu·∫£
@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        if not request.data:
            return jsonify({"error": "No CSV data provided"}), 400

        csv_data = request.data.decode('utf-8')
        print("üì• Received CSV Data:\n", csv_data[:500])

        # Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
        if not csv_data.strip():
            return jsonify({"error": "Empty CSV data received"}), 400

        # ƒê·ªçc d·ªØ li·ªáu CSV
        try:
            df = pd.read_csv(io.StringIO(csv_data), encoding='utf-8-sig', skip_blank_lines=True)
        except Exception as e:
            return jsonify({"error": f"CSV Parsing Error: {str(e)}"}), 400

        print("üìä Parsed DataFrame:\n", df.head())

        # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
        df, missing_positions = preprocess_input(df)

        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu d·ª± ƒëo√°n th√†nh JSON
        response = {
            'message': 'CSV processed successfully',
            'predictions': df.to_dict(orient='records'),
            'missing_positions': missing_positions
        }

        return jsonify(response)

    except Exception as e:
        print(f"‚ùå L·ªói h·ªá th·ªëng: {e}")
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
