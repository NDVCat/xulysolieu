from flask import Flask, request, jsonify
import joblib
import numpy as np
import pandas as pd
import os
import io

app = Flask(__name__)

# üìå ƒê·ªãnh nghƒ©a c√°c c·ªôt ƒë·∫ßu v√†o c·∫ßn thi·∫øt
EXPECTED_COLUMNS = ['Qgas', 'Qwater', 'Oilrate', 'LiqRate', 'DayOn']

# üìå T·∫£i t·∫•t c·∫£ m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
MODEL_DIR = "models"  # Th∆∞ m·ª•c ch·ª©a c√°c m√¥ h√¨nh
models = {}

if not os.path.exists(MODEL_DIR):
    raise FileNotFoundError(f"‚ö†Ô∏è Th∆∞ m·ª•c '{MODEL_DIR}' kh√¥ng t·ªìn t·∫°i!")

for file in os.listdir(MODEL_DIR):
    if file.endswith(".pkl"):
        model_name = file.replace(".pkl", "")
        models[model_name] = joblib.load(os.path.join(MODEL_DIR, file))

if not models:
    raise FileNotFoundError("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh n√†o trong th∆∞ m·ª•c 'models'!")

print(f"‚úÖ ƒê√£ t·∫£i {len(models)} m√¥ h√¨nh:", list(models.keys()))


# üìå H√†m ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
def preprocess_input(df):
    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu cho c·ªôt s·ªë
    for col in df.select_dtypes(include=['number']).columns:
        if df[col].isnull().all():
            df[col] = 0.0  # N·∫øu to√†n b·ªô c·ªôt kh√¥ng c√≥ gi√° tr·ªã, ƒëi·ªÅn 0
        else:
            df[col] = df[col].fillna(df[col].mean())  # ƒêi·ªÅn gi√° tr·ªã trung b√¨nh n·∫øu c√≥ d·ªØ li·ªáu

    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu cho c·ªôt d·∫°ng object
    for col in df.select_dtypes(include=['object']).columns:
        df[col] = df[col].fillna('Unknown')

    # ƒê·∫£m b·∫£o c√°c c·ªôt EXPECTED_COLUMNS c√≥ trong dataframe
    for col in EXPECTED_COLUMNS:
        if col not in df.columns:
            df[col] = 0.0  # N·∫øu thi·∫øu c·ªôt n√†o, ƒëi·ªÅn m·∫∑c ƒë·ªãnh l√† 0

    df[EXPECTED_COLUMNS] = df[EXPECTED_COLUMNS].astype(float)
    return df


# üìå API x·ª≠ l√Ω file CSV ƒë·∫ßu v√†o v√† d·ª± ƒëo√°n k·∫øt qu·∫£
@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        if not request.data:
            return jsonify({"error": "No CSV data provided"}), 400

        csv_data = request.data.decode('utf-8')  
        print("üì• Received CSV Data:\n", csv_data[:500])  # Log gi·ªõi h·∫°n 500 k√Ω t·ª±

        # Ki·ªÉm tra d·ªØ li·ªáu c√≥ ph·∫£i CSV h·ª£p l·ªá kh√¥ng
        if not csv_data.strip():
            return jsonify({"error": "Empty CSV data received"}), 400

        # Th·ª≠ ƒë·ªçc CSV
        try:
            df = pd.read_csv(io.StringIO(csv_data), encoding='utf-8-sig', skip_blank_lines=True)
        except Exception as e:
            return jsonify({"error": f"CSV Parsing Error: {str(e)}"}), 400

        print("üìä Parsed DataFrame:\n", df.head())

        df = preprocess_input(df)

        # üìå D·ª± ƒëo√°n d·ªØ li·ªáu m·ªõi
        predictions = {}
        for target_col, model in models.items():
            try:
                feature_df = df[EXPECTED_COLUMNS]  
                print(f"üîπ D·ª± ƒëo√°n gi√° tr·ªã cho {target_col}...")
                df[f'Predicted_{target_col}'] = model.predict(feature_df)
                predictions[target_col] = df[f'Predicted_{target_col}'].tolist()
            except Exception as e:
                return jsonify({'error': f'Model prediction error for {target_col}: {str(e)}'}), 500

        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang CSV string
        response = {
            'message': 'CSV processed successfully',
            'predictions': df.to_dict(orient='records')  # Tr·∫£ v·ªÅ danh s√°ch JSON
        }

        return jsonify(response)

    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
