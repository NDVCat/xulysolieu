from flask import Flask, request, jsonify
import joblib
import numpy as np
import pandas as pd
import os
import io

app = Flask(__name__)

# üìå ƒê·ªãnh nghƒ©a c√°c c·ªôt ƒë·∫ßu v√†o c·∫ßn thi·∫øt
EXPECTED_COLUMNS = ['DayOn','Qoil','Qgas','Qwater','GOR','ChokeSize','Press_WH','Oilrate','LiqRate','GasRate']

# üìå T·∫£i t·∫•t c·∫£ m√¥ h√¨nh t·ª´ t·ªáp duy nh·∫•t
MODEL_FILE = "reverse_prediction_models.pkl"

if not os.path.exists(MODEL_FILE):
    raise FileNotFoundError(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ªáp '{MODEL_FILE}'!")

try:
    models = joblib.load(MODEL_FILE)
    if not isinstance(models, dict):
        raise ValueError("‚ö†Ô∏è D·ªØ li·ªáu trong t·ªáp kh√¥ng ph·∫£i l√† dictionary ch·ª©a c√°c model!")
except Exception as e:
    raise RuntimeError(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {e}")

print(f"‚úÖ ƒê√£ t·∫£i {len(models)} m√¥ h√¨nh:", list(models.keys()))

# üìå H√†m ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
def preprocess_input(df):
    # Chuy·ªÉn c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá th√†nh NaN
    df.replace({"...": np.nan, "null": np.nan, "NaN": np.nan, "": np.nan}, inplace=True)

    # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÅu c√≥ trong DataFrame
    for col in EXPECTED_COLUMNS:
        if col not in df.columns:
            df[col] = np.nan

    # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
    for col in EXPECTED_COLUMNS:
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # L∆∞u l·∫°i v·ªã tr√≠ c√°c gi√° tr·ªã b·ªã thi·∫øu
    missing_positions = {col: df[df[col].isnull()].index.tolist() for col in EXPECTED_COLUMNS}

    # Thay th·∫ø NaN b·∫±ng gi√° tr·ªã trung v·ªã c·ªßa m·ªói c·ªôt
    for col in EXPECTED_COLUMNS:
        median_value = df[col].median()
        df[col].fillna(median_value, inplace=True)

    return df, missing_positions

# üìå API x·ª≠ l√Ω file CSV ƒë·∫ßu v√†o v√† d·ª± ƒëo√°n k·∫øt qu·∫£
@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        if not request.data:
            return jsonify({"error": "No CSV data provided"}), 400

        csv_data = request.data.decode('utf-8')
        print("üì• Received CSV Data:\n", csv_data[:500])

        if not csv_data.strip():
            return jsonify({"error": "Empty CSV data received"}), 400

        try:
            df = pd.read_csv(io.StringIO(csv_data), encoding='utf-8-sig', skip_blank_lines=True)
        except Exception as e:
            return jsonify({"error": f"CSV Parsing Error: {str(e)}"}), 400

        print("üìä Parsed DataFrame:\n", df.head())

        # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu v√† x√°c ƒë·ªãnh v·ªã tr√≠ c√°c gi√° tr·ªã thi·∫øu
        df, missing_positions = preprocess_input(df)

        # üìå D·ª± ƒëo√°n l·∫°i c√°c gi√° tr·ªã ƒë√£ b·ªã thay th·∫ø b·∫±ng trung v·ªã
        predictions = {}
        for target_col, model in models.items():
            if target_col in missing_positions and missing_positions[target_col]:
                missing_indices = missing_positions[target_col]

                try:
                    feature_df = df.loc[missing_indices, model.feature_names_in_]
                    print(f"üîπ D·ª± ƒëo√°n l·∫°i gi√° tr·ªã cho {target_col}...")
                    predicted_values = model.predict(feature_df)

                    # C·∫≠p nh·∫≠t gi√° tr·ªã ƒë√£ d·ª± ƒëo√°n v√†o DataFrame
                    df.loc[missing_indices, target_col] = predicted_values

                    predictions[target_col] = predicted_values.tolist()
                except Exception as e:
                    return jsonify({'error': f'Model prediction error for {target_col}: {str(e)}'}), 500

        response = {
            'message': 'CSV processed successfully',
            'predictions': df.to_dict(orient='records')
        }

        return jsonify(response)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
